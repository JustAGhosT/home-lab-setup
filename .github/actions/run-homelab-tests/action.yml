name: 'run-homelab-tests'
description: 'Run tests for the HomeLab environment and report results'
author: 'HomeLab Team'
inputs:
  test_type:
    description: 'Type of tests to run (All, Unit, Integration, Workflow)'
    required: false
    default: 'All'
  coverage:
    description: 'Generate coverage report'
    required: false
    default: 'true'
  generate_report:
    description: 'Generate HTML test report'
    required: false
    default: 'true'
  fix_issues:
    description: 'Attempt to fix common issues automatically'
    required: false
    default: 'false'
outputs:
  success:
    description: 'Whether all tests passed'
    value: ${{ steps.run-tests.outputs.success }}
  total_tests:
    description: 'Total number of tests run'
    value: ${{ steps.run-tests.outputs.total_tests }}
  passed_tests:
    description: 'Number of tests that passed'
    value: ${{ steps.run-tests.outputs.passed_tests }}
  failed_tests:
    description: 'Number of tests that failed'
    value: ${{ steps.run-tests.outputs.failed_tests }}
  skipped_tests:
    description: 'Number of tests that were skipped'
    value: ${{ steps.run-tests.outputs.skipped_tests }}
  pass_rate:
    description: 'Percentage of tests that passed'
    value: ${{ steps.run-tests.outputs.pass_rate }}
  test_results:
    description: 'Full test results output'
    value: ${{ steps.run-tests.outputs.test_results }}
  report_path:
    description: 'Path to the generated HTML report'
    value: ${{ steps.run-tests.outputs.report_path }}
  failed_test_details:
    description: 'Details about failed tests'
    value: ${{ steps.run-tests.outputs.failed_test_details }}
  issues_fixed:
    description: 'Whether any issues were automatically fixed'
    value: ${{ steps.run-tests.outputs.issues_fixed }}
  fix_details:
    description: 'Details about fixes that were applied'
    value: ${{ steps.run-tests.outputs.fix_details }}
runs:
  using: 'composite'
  steps:
    - name: Run HomeLab Tests
      id: run-tests
      shell: pwsh
      run: |
        cd $env:GITHUB_WORKSPACE

        # Check if Test-HomeLab.ps1 script exists
        if (-not (Test-Path "./Test-HomeLab.ps1")) {
          Write-Host "Error: Test-HomeLab.ps1 script not found in workspace root" -ForegroundColor Red
          echo "success=false" >> $env:GITHUB_OUTPUT
          echo "total_tests=0" >> $env:GITHUB_OUTPUT
          echo "passed_tests=0" >> $env:GITHUB_OUTPUT
          echo "failed_tests=0" >> $env:GITHUB_OUTPUT
          echo "skipped_tests=0" >> $env:GITHUB_OUTPUT
          echo "pass_rate=0" >> $env:GITHUB_OUTPUT
          echo "issues_fixed=false" >> $env:GITHUB_OUTPUT
          exit 1
        }

        # Run tests with error handling
        try {
          ./Test-HomeLab.ps1 -TestType "${{ inputs.test_type }}" -OutputPath "./TestResults"
          $testSuccess = $LASTEXITCODE -eq 0
        }
        catch {
          Write-Host "Error executing Test-HomeLab.ps1: $($_.Exception.Message)" -ForegroundColor Red
          $testSuccess = $false
        }

        # Initialize default values
        $totalTests = 0
        $passedTests = 0
        $failedTests = 0
        $skippedTests = 0
        $passRate = 0
        $issuesFixed = $false

        # Parse test results if TestResults directory exists
        if (Test-Path "./TestResults") {
          try {
            # Look for XML test result files (NUnit format)
            $xmlFiles = Get-ChildItem "./TestResults" -Filter "*.xml" -ErrorAction SilentlyContinue
            if ($xmlFiles) {
              foreach ($xmlFile in $xmlFiles) {
                try {
                  [xml]$testResults = Get-Content $xmlFile.FullName
                  if ($testResults.'test-results') {
                    $totalTests += [int]$testResults.'test-results'.total
                    $passedTests += [int]$testResults.'test-results'.passed
                    $failedTests += [int]$testResults.'test-results'.failures
                    $skippedTests += [int]$testResults.'test-results'.skipped
                  }
                  elseif ($testResults.'test-run') {
                    $totalTests += [int]$testResults.'test-run'.total
                    $passedTests += [int]$testResults.'test-run'.passed
                    $failedTests += [int]$testResults.'test-run'.failed
                    $skippedTests += [int]$testResults.'test-run'.skipped
                  }
                }
                catch {
                  Write-Host "Warning: Could not parse test results from $($xmlFile.Name): $($_.Exception.Message)" -ForegroundColor Yellow
                }
              }
            }

            # Calculate pass rate
            if ($totalTests -gt 0) {
              $passRate = [math]::Round(($passedTests / $totalTests) * 100, 2)
            }
          }
          catch {
            Write-Host "Warning: Could not parse test results: $($_.Exception.Message)" -ForegroundColor Yellow
          }
        }

        # Set GitHub Actions outputs with real values
        echo "success=$testSuccess" >> $env:GITHUB_OUTPUT
        echo "total_tests=$totalTests" >> $env:GITHUB_OUTPUT
        echo "passed_tests=$passedTests" >> $env:GITHUB_OUTPUT
        echo "failed_tests=$failedTests" >> $env:GITHUB_OUTPUT
        echo "skipped_tests=$skippedTests" >> $env:GITHUB_OUTPUT
        echo "pass_rate=$passRate" >> $env:GITHUB_OUTPUT
        echo "issues_fixed=$issuesFixed" >> $env:GITHUB_OUTPUT

        # Exit with appropriate code
        if (-not $testSuccess) {
          exit 1
        }
