name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.1)'
        required: true
        type: string

jobs:
  validate:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          if ("${{ github.event_name }}" -eq "push") {
            $version = "${{ github.ref_name }}"
          } else {
            $version = "${{ github.event.inputs.version }}"
          }
          
          if (-not $version.StartsWith("v")) {
            $version = "v$version"
          }
          
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"
        shell: pwsh

      - name: Validate version format
        run: |
          $version = "${{ steps.get-version.outputs.version }}"
          if ($version -notmatch '^v\d+\.\d+\.\d+(-\w+)?$') {
            Write-Error "Invalid version format: $version. Expected format: v1.0.0 or v1.0.0-beta"
            exit 1
          }
          Write-Host "Version format is valid: $version"
        shell: pwsh

      - name: Install required modules
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          Install-Module -Name PowerShell-Yaml -Force -SkipPublisherCheck

      - name: Run tests
        shell: pwsh
        run: |
          cd tests
          ./Run-HomeLab-Tests.ps1 -TestType All
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Tests failed. Cannot proceed with release."
            exit 1
          }

  build:
    needs: validate
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update module version
        run: |
          $version = "${{ needs.validate.outputs.version }}"
          $versionNumber = $version.TrimStart('v')
          
          # Update HomeLab.psd1
          $manifestPath = "HomeLab/HomeLab.psd1"
          $content = Get-Content $manifestPath -Raw
          $content = $content -replace "ModuleVersion\s*=\s*'[^']*'", "ModuleVersion = '$versionNumber'"
          $content = $content -replace "ReleaseNotes\s*=\s*'[^']*'", "ReleaseNotes = '$version - See CHANGELOG.md for details'"
          Set-Content -Path $manifestPath -Value $content
          
          Write-Host "Updated module version to $versionNumber"
        shell: pwsh

      - name: Create release package
        run: |
          $version = "${{ needs.validate.outputs.version }}"
          
          # Create release directory
          $releaseDir = "release"
          New-Item -ItemType Directory -Path $releaseDir -Force
          
          # Copy essential files
          Copy-Item -Path "HomeLab" -Destination "$releaseDir/HomeLab" -Recurse
          Copy-Item -Path "functions" -Destination "$releaseDir/functions" -Recurse
          Copy-Item -Path "docs" -Destination "$releaseDir/docs" -Recurse
          Copy-Item -Path "tests" -Destination "$releaseDir/tests" -Recurse
          Copy-Item -Path "README.md" -Destination "$releaseDir/"
          Copy-Item -Path "LICENSE" -Destination "$releaseDir/"
          Copy-Item -Path "CHANGELOG.md" -Destination "$releaseDir/"
          Copy-Item -Path "CONTRIBUTING.md" -Destination "$releaseDir/"
          Copy-Item -Path "SECURITY.md" -Destination "$releaseDir/"
          
          # Create ZIP archive
          $archiveName = "HomeLab-$version.zip"
          Compress-Archive -Path "$releaseDir/*" -DestinationPath $archiveName
          
          Write-Host "Created release package: $archiveName"
        shell: pwsh

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: HomeLab-*.zip

  release:
    needs: [validate, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-package

      - name: Extract changelog for version
        id: changelog
        run: |
          version="${{ needs.validate.outputs.version }}"
          
          # Extract changelog section for this version
          if [ -f "CHANGELOG.md" ]; then
            # Get content between version headers
            changelog=$(sed -n "/## \[${version#v}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
            if [ -z "$changelog" ]; then
              changelog="Release $version - See CHANGELOG.md for full details"
            fi
          else
            changelog="Release $version"
          fi
          
          # Save changelog to file for GitHub release
          echo "$changelog" > release-notes.md
          echo "Changelog extracted for $version"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: release-notes.md
          files: HomeLab-*.zip
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-powershell-gallery:
    needs: [validate, build, release]
    runs-on: windows-latest
    if: ${{ !contains(needs.validate.outputs.version, '-') }} # Only for stable releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-package

      - name: Extract and prepare module
        run: |
          $archiveName = Get-ChildItem -Name "HomeLab-*.zip"
          Expand-Archive -Path $archiveName -DestinationPath "extracted"
          
          # Verify module structure
          if (-not (Test-Path "extracted/HomeLab/HomeLab.psd1")) {
            Write-Error "Module manifest not found in expected location"
            exit 1
          }
          
          Write-Host "Module prepared for PowerShell Gallery"
        shell: pwsh

      - name: Publish to PowerShell Gallery
        run: |
          # Note: This would require a PowerShell Gallery API key
          # For now, this is a placeholder for future implementation
          Write-Host "PowerShell Gallery publishing would happen here"
          Write-Host "Requires POWERSHELL_GALLERY_API_KEY secret to be configured"
        shell: pwsh
        # Uncomment when ready to publish:
        # env:
        #   POWERSHELL_GALLERY_API_KEY: ${{ secrets.POWERSHELL_GALLERY_API_KEY }}

  notify:
    needs: [validate, build, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "# 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "✅ Release created successfully" >> $GITHUB_STEP_SUMMARY
            echo "📦 Release package available in GitHub Releases" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Release failed" >> $GITHUB_STEP_SUMMARY
          fi
